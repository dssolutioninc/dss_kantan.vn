
<div class="col-sm-12 speech-learning">
    <label id="checkBrowser"></label>

    <div class="slider slider-for speech-control">
        <% sentences.forEach( function(sentenceItem, index){ %>
        <div>
          <section>
            <div class="row">
              <div class="col-xs-12">
                <h3 class="text-danger text-center"><i class="fa fa-question-circle"></i><span
                    class="question<%= index %>"><%= sentenceItem.sentence %></span></h3>
              </div>

              <div class="col-xs-6">
                <h3 class="text-right"><%=__("Listening")%>: </h3>
              </div>
              <div class="col-xs-6">
                <h3 class="status<%= index %>"><%=__("Not Started")%></h3>
              </div>

              <div class="col-xs-6">
                <h3 class="text-right"><%=__("Received")%>: </h3>
              </div>
              <div class="col-xs-6 clearfix">
                <h3 class="result<%= index %>"><%=__("Waiting")%></h3>
              </div>
              <div class="col-xs-6">
                <h3 class="text-right"><%=__("Result")%>: </h3>
              </div>
              <div class="col-xs-6">
                <h3 class="check<%= index %>"><%=__("Waiting")%></h3>
              </div>
            </div>


            <a class="voice-start btn-start<%= index %>" onclick="startVoice();">
              <div class="check-voice">
                <i class="fa fa-microphone fa-5x"></i>

                <div class="gt-speech-item"></div>
              </div>
            </a>

          </section>
+
        </div>
        <% }) %>
    </div>
</div>


<span id="sentencesL" forValue="<%= sentences.length %>"></span>
<script src="/js/dependencies/jquery.js"></script>
<script src="/js/dependencies/slick.js"></script>
<script src="/js/dependencies/bowser.min.js"></script>
<script src="/js/dependencies/diff.js"></script>
<script>

    function similar_text(first, second, percent) {
        if (first === null || second === null || typeof first === 'undefined' || typeof second === 'undefined') {
            return 0;
        }

        first += '';
        second += '';

        var pos1 = 0,
                pos2 = 0,
                max = 0,
                firstLength = first.length,
                secondLength = second.length,
                p, q, l, sum;

        max = 0;

        for (p = 0; p < firstLength; p++) {
            for (q = 0; q < secondLength; q++) {
                for (l = 0;
                     (p + l < firstLength) && (q + l < secondLength) && (first.charAt(p + l) === second.charAt(q + l)); l++)
                    ;
                if (l > max) {
                    max = l;
                    pos1 = p;
                    pos2 = q;
                }
            }
        }

        sum = max;

        if (sum) {
            if (pos1 && pos2) {
                sum += this.similar_text(first.substr(0, pos1), second.substr(0, pos2));
            }

            if ((pos1 + max < firstLength) && (pos2 + max < secondLength)) {
                sum += this.similar_text(first.substr(pos1 + max, firstLength - pos1 - max), second.substr(pos2 + max,
                        secondLength - pos2 - max));
            }
        }

        if (!percent) {
            return sum;
        } else {
            return Math.round((sum * 200) / (firstLength + secondLength));
        }
    }


    var diffType = "diffChars";
    function changed(dest, src) {
        var diff = JsDiff[diffType](src, dest);
        var addText = "";


        for (var i = 0; i < diff.length; i++) {

            if (diff[i].added && diff[i + 1] && diff[i + 1].removed) {
                var swap = diff[i];
                diff[i] = diff[i + 1];
                diff[i + 1] = swap;
            }

            if (diff[i].removed) {
                addText += "<span class='text-danger'>"
                addText += diff[i].value;
                addText += "</span>";
            } else if (diff[i].added) {
                //addText += diff[i].value;
            } else {
                addText += "<span class='text-success'>"
                addText += diff[i].value;
                addText += "</span>";
            }
        }

        return addText;
    }

    var i;
    var question;
    var delay = 1500;
    var ON_OFF = false;
    function checkBrowser() {
        var chromeName = "chrome";
        var browserName = bowser.name.toLowerCase();
        console.log(browserName);
        if (chromeName != browserName) {
            var msg = translateText("Browser is")+" "+ browserName +" "+ translateText("not supported Must using") + chromeName;
            document.getElementById("checkBrowser").innerHTML = msg;
            document.getElementById("checkBrowser").className = 'text-danger';
            return msg;
        } else {
            return "OK";
        }
    }

    var isChrome = checkBrowser();

    var recognition = new webkitSpeechRecognition();
    recognition.lang = "ja-JP";
    recognition.continuous = true;
    recognition.interimResults = true;

    var sentencesL = document.getElementById('sentencesL').getAttribute('forValue');

    function getCurrentActive() {
        var i;
        $('.slick-slide').each(function () {
            if ($(this).hasClass('slick-current')) {
                i = $(this).attr('data-slick-index');
            }
        });

        return i;
    }

    function stop() {
        recognition.stop();
        var i = getCurrentActive();
        $('.btn-start' + i).removeClass('text-danger');
        $('.btn-start' + i).removeClass('gt-speech');
    }

    function start() {
        recognition.start();
        var i = getCurrentActive();
        $('.btn-start' + i).addClass('text-danger');
        $('.btn-start' + i).addClass('gt-speech');
    }

    function replaceChar(str) {
        var pattern = ['。', '、', '！', ' ', '　', '～'];
        $.each(pattern, function (index, value) {
            str = str.replace(value, '');
        });
        return str;
    }

    function addMessage(msgCheck) {

        var i = getCurrentActive();
        question = replaceChar($.trim($(".question" + i).html()));
        var msg = replaceChar(msgCheck);

        var percentCorrect = similar_text(question,msg,true);

        if (percentCorrect == 100) {
            $(".check" + i).html("<span class='text-success'><i class='fa fa-check'></i> "+translateText("Correct")+"  : 100% </span>");
            $('.status' + i).html("<span class='text-success'><i class='fa fa-check'></i>"+translateText("Completed")+"</span>");
            $(".result" + i).html("<span class='text-success'><i class='fa fa-bullhorn'></i> " + msgCheck + "</span>");
            //stop();

            setTimeout(function () {
                $('.slider-for').slick('slickNext');
                $('.slider-nav').slick('slickNext');
            }, delay);

        } else {
            $(".check" + i).html("<span class='text-danger'><i class='fa fa-times'></i> "+translateText("Correct")+" : " + percentCorrect + "% </span>");
            $('.status' + i).html("<span class='text-danger'><i class='fa fa-times'></i>"+translateText("Try again")+" </span>");
            $(".result" + i).html("<i class='fa fa-bullhorn'></i> " + changed(question, msg));
        }
    }

    function startVoice() {
        if (isChrome == "OK") {
            var i = getCurrentActive();
            if (!$('.btn-start' + i).hasClass('text-danger')) {
                start();
                ON_OFF = true;
            } else {
                stop();
                ON_OFF = false;
            }
        } else {
            alert(isChrome);
        }
    }

    $(document).ready(function () {
        $('.slider-for').on('afterChange', function (event, slick, currentSlide) {
            //stop();
            var i = getCurrentActive();

            if (ON_OFF) {
                $('.btn-start' + i).addClass('text-danger');
                $('.btn-start' + i).addClass('gt-speech');
            } else {
                $('.btn-start' + i).removeClass('text-danger');
                $('.btn-start' + i).removeClass('gt-speech');
            }
        });
    });

    recognition.onsoundstart = function () {
        var current = getCurrentActive();
        $('.status' + current).html(translateText('Started'));
    };

    recognition.onnomatch = function () {
        var current = getCurrentActive();
        $('.status' + current).html("<span class='text-danger'><i class='fa fa-times'></i> "+translateText("Try again")+"</span>");
    };

    recognition.onerror = function () {
        var current = getCurrentActive();
        $('.status' + current).html("<span class='text-danger'><i class='fa fa-times'></i>"+translateText("error")+" </span>");
        stop();
    };

    recognition.onsoundend = function () {
        var current = getCurrentActive();
        $('.status' + current).html(translateText('Stopping'));
        //stop();
    };
    recognition.onend = function () {
        var current = getCurrentActive();
        $('.status' + current).html(translateText("Not Started"));
        //stop();
        $('.btn-start' + current).removeClass('text-danger');
        $('.btn-start' + current).removeClass('gt-speech');
        ON_OFF = false;
    };

    recognition.onresult = function (event) {
        if (typeof(event.results) == 'undefined') {
            recognition.onend = null;
            stop();
            return;
        }
        var results = event.results;
        var current = getCurrentActive();
        for (var i = event.resultIndex; i < results.length; i++) {
            var text = $.trim(results[i][0].transcript);
            if (results[i].isFinal) {
                addMessage(text);
            } else {
                $('.status' + current).html(text);
            }
        }
    };

    //SPEECH
    $('.slider-for').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        //  arrows: true,
        fade: false,
        touchMove:false,
        draggable: false,
        dots:true,
        prevArrow: '<button type="button" data-role="none" class="btn btn-show-list btn-arrow-left-exe" aria-label="Previous" tabindex="0" role="button"><i class="fa fa-chevron-left" style="color:LightGray"></i></button>',
        nextArrow: '<button type="button" data-role="none" class="btn btn-show-list btn-arrow-right-exe" aria-label="Next" tabindex="0" role="button"><i class="fa fa-chevron-right" style="color:LightGray"></i></button>'
    });
</script>
